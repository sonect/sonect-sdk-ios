// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name iDenfySDK
import AVFoundation
import CommonCrypto
import CoreImage
import Foundation
import JGProgressHUD
import MaterialComponents.MaterialActivityIndicator
import MaterialComponents
import Security
import Swift
import UIKit
import ZIPFoundation
@_exported import iDenfySDK
import idenfycore
import idenfyviews
public class IdenfyIdentificationResultStatus {
  final public let idenfyIdentificationStatus: iDenfySDK.IdenfyIdentificationStatus
  final public let idenfyProcessingResultState: iDenfySDK.IdenfyProcessingResultState
  public init(idenfyIdentificationStatus: iDenfySDK.IdenfyIdentificationStatus, idenfyProcessingResultState: iDenfySDK.IdenfyProcessingResultState)
  @objc deinit
}
@objc public class IdenfyController : ObjectiveC.NSObject {
  @objc public static let shared: iDenfySDK.IdenfyController
  @objc public var idenfyIdentificationResultCallback: ((iDenfySDK.IdenfyIdentificationResult) -> Swift.Void)?
  @objc public var succeesFunction: ((iDenfySDK.AuthenticationResultResponse) -> Swift.Void)?
  @objc public var failureFunction: ((iDenfySDK.IdenfyErrorResponse) -> Swift.Void)?
  @objc public var exitFunction: (() -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(idenfySettings: iDenfySDK.IdenfySettings)
  @objc public static func continueFlow()
  @objc public func handleIDenfyCallbacks(onSuccess: @escaping (iDenfySDK.AuthenticationResultResponse) -> Swift.Void, onError: @escaping (iDenfySDK.IdenfyErrorResponse) -> Swift.Void, onUserExit: @escaping () -> Swift.Void)
  @objc public func handleIdenfyCallbacksWithManualResults(idenfyIdentificationResult: @escaping (iDenfySDK.IdenfyIdentificationResult) -> Swift.Void)
  @objc public func instantiateNavigationController() -> iDenfySDK.IdenfySDKNavigationController
  @objc public func initializeIdenfySDK(idenfySettings: iDenfySDK.IdenfySettings)
  @objc public func initializeIdenfySDKV2WithManual(idenfySettingsV2: iDenfySDK.IdenfySettingsV2, idenfyViewsV2: iDenfySDK.IdenfyViewsV2)
  @objc public func initializeIdenfySDKV2WithManual(idenfySettingsV2: iDenfySDK.IdenfySettingsV2)
  public func initializeWithCustomWaitingViewController(idenfySettingsV2: iDenfySDK.IdenfySettingsV2, idenfyInProcessIdentificationResultsDelegate: iDenfySDK.IdenfyInProcessIdentificationResultsDelegate)
  public func initializeWithCustomWaitingViewController(idenfySettingsV2: iDenfySDK.IdenfySettingsV2, idenfyInProcessIdentificationResultsDelegate: iDenfySDK.IdenfyInProcessIdentificationResultsDelegate, idenfyViewsV2: iDenfySDK.IdenfyViewsV2)
  @objc public func setIdenfyLoggingHandler(idenfyLoggingHandler: iDenfySDK.IdenfyLoggingHandlerUseCase)
  @objc public func getIdenfySDKVersion() -> Swift.String
  @objc deinit
}
@objc public enum IssuingCountrySkippedEnum : Swift.Int {
  case IssuingCountrySkipped
  case IssuingCountryNotSkipped
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class IdenfyBuilderV2 : ObjectiveC.NSObject {
  @objc public func withUISettingsV2(_ idenfyUISettingsV2: iDenfySDK.IdenfyUISettingsV2) -> iDenfySDK.IdenfyBuilderV2
  @objc public func withAuthToken(_ authToken: Swift.String) -> iDenfySDK.IdenfyBuilderV2
  @objc public func withSelectedLocale(_ selectedLocale: iDenfySDK.IdenfyLocaleEnum) -> iDenfySDK.IdenfyBuilderV2
  @objc public func withDocumentIssuingCountrySkipped() -> iDenfySDK.IdenfyBuilderV2
  @objc public func withSSLPinning(_ sslPinning: Swift.Bool) -> iDenfySDK.IdenfyBuilderV2
  @objc public func build() -> iDenfySDK.IdenfySettingsV2
  @objc override dynamic public init()
  @objc deinit
}
@objc open class IdenfyIdentificationResultsSettings : ObjectiveC.NSObject {
  public var isAutoDismissOnSuccessEvent: Swift.Bool
  public var isAutoDismissOnUserExitEvent: Swift.Bool
  public var isAutoDismissOnErrorEvent: Swift.Bool
  public var isAutoDismissOnReviewingEvent: Swift.Bool
  public var isSuccessResultsViewVisible: Swift.Bool
  public var isRetryErrorResultsViewVisible: Swift.Bool
  public var isErrorResultsViewVisible: Swift.Bool
  public var isRetryingIdentificationAvailable: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public struct IdenfyCoreNotificationManager {
  public static let startProcessingReady: Foundation.Notification.Name
  public static let startCheckingResults: Foundation.Notification.Name
  public static let startCheckingLivenessResults: Foundation.Notification.Name
  public static let restartInitialAgreementUIN: Foundation.Notification.Name
  public static let bundleDownloadedNotification: Foundation.Notification.Name
  public static let handleDocumentAnalyzationResponseErrorWithContinue: Foundation.Notification.Name
  public static let handleDocumentAnalyzationResponseSuccess: Foundation.Notification.Name
  public static let documentInitialPhotoAnalysisFinished: Foundation.Notification.Name
  public static let finishSDK: Foundation.Notification.Name
  public static let continueFlow: Foundation.Notification.Name
  public static let handleZipUpload: Foundation.Notification.Name
}
public enum CustomCameraSessionDrawerState {
  case expanded
  case collapsed
  case hidden
  public static func == (a: iDenfySDK.CustomCameraSessionDrawerState, b: iDenfySDK.CustomCameraSessionDrawerState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public class IdenfyUIBuilder : ObjectiveC.NSObject {
  public var overlayDocumentsText: iDenfySDK.OverlayText?
  public var idenfyLivenessUICustomization: iDenfySDK.IdenfyLivenessUISettings?
  public var isCustomResultsView: Swift.Bool
  public var areInstructionsNeeded: Swift.Bool?
  public func withInstructions(_ areInstructionsNeeded: Swift.Bool) -> iDenfySDK.IdenfyUIBuilder
  public func withCustomColors(colorPrimary: UIKit.UIColor, colorPrimaryDark: UIKit.UIColor, colorAccent: UIKit.UIColor) -> iDenfySDK.IdenfyUIBuilder
  public func withCustomDocumentsOverlayText(overlayDocumentsText: iDenfySDK.OverlayText) -> iDenfySDK.IdenfyUIBuilder
  public func withCustomLoadingView(loadingView: UIKit.UIView?) -> iDenfySDK.IdenfyUIBuilder
  public func withCustomResultsView(customResultsView: Swift.Bool)
  public func withLivenessUISettings(livenessUISettings: iDenfySDK.IdenfyLivenessUISettings?) -> iDenfySDK.IdenfyUIBuilder
  public func withCustomDocumentBorderColor(borderColor: UIKit.UIColor?) -> iDenfySDK.IdenfyUIBuilder
  public func build() -> iDenfySDK.IdenfyUISettings
  @objc override dynamic public init()
  @objc deinit
}
public struct LivelinessLicenseDTO : Swift.Codable {
  public let expiryDate: Swift.String?
  public let key: Swift.String?
  public let appId: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class IdenfyIdentificationResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let autoIdentificationStatus: iDenfySDK.AutoIdentificationStatus
  @objc final public let manualIdentificationStatus: iDenfySDK.ManualIdentificationStatus
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public protocol IdenfyCustomCameraSessionDrawerDelegate {
  @objc func drawerBackButtonPressed()
  @objc func expandCollapseDrawerPressed()
  @objc func nextInstructionButtonPressed()
  @objc func previousInstructionButtonPressed()
}
public protocol ManualReviewingIdentificationTimerActionsDelegate : AnyObject {
  func updateTime(_ time: Swift.String)
}
public struct ConstsIdenfyImages {
}
public struct ConstsNotification {
}
@objc public protocol IdenfyLoggingHandlerUseCase {
  @objc func logEvent(event: Swift.String, message: Swift.String, token: Swift.String)
}
@objc public class OverlayTextBuilder : ObjectiveC.NSObject {
  public func withCustomSettings(fontSize: CoreGraphics.CGFloat?, fontColor: UIKit.UIColor?, font: UIKit.UIFont?) -> iDenfySDK.OverlayTextBuilder
  public func build() -> iDenfySDK.OverlayText
  @objc override dynamic public init()
  @objc deinit
}
public class IdenfySplashScreenUISettings {
  public var idenfySplashScreenBackgroundColor: UIKit.UIColor
  @objc deinit
}
@objc open class BackNavigationView : UIKit.UIView {
  public var backNavigationButton: UIKit.UIButton
  public var backNavigationTitle: UIKit.UILabel
  public var backArrowImageView: UIKit.UIImageView
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc open func handleTap(_: UIKit.UITapGestureRecognizer? = nil)
  open func setupViews()
  open func setupBackNavigationButton()
  open func setupBackArrowImageView()
  @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
extension CustomCameraSessionDrawer : idenfyviews.CameraSessionDrawerDelegate {
  public func expandDrawerAction()
  public func collapseDrawerAction()
  public func previousInstructionButtonPressedAction()
  public func nextInstructionButtonPressedAction()
  public func backButtonPressedAction()
}
@objc public class CustomCameraSessionDrawer : UIKit.UIView {
  public var drawerContentView: idenfyviews.DrawerContentViewableV2?
  public var drawerContentViewV1: iDenfySDK.DrawerContentViewV1?
  weak public var delegate: iDenfySDK.IdenfyCustomCameraSessionDrawerDelegate?
  public func setIntentedDrawerState(_ state: iDenfySDK.CustomCameraSessionDrawerState, slideDuration: Swift.Double? = nil, isUserInteractionEnabled: Swift.Bool = true)
  public func getCurrentDrawerState() -> iDenfySDK.CustomCameraSessionDrawerState
  public init(frame _: CoreGraphics.CGRect, idenfyController: iDenfySDK.IdenfyController?, gradientLayer: QuartzCore.CAGradientLayer, cameraSessionInstructions: idenfyviews.CameraSessionInstructions)
  @objc override dynamic public func layoutSubviews()
  public func resetIntructionsState()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
public enum IdenfyIdentificationStatus : Swift.String, Swift.Codable {
  case APPROVED
  case DENIED
  case SUSPECTED
  case REVIEWING
  case UNKNOWN
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum InstructionEnum : Swift.String {
  case PASSPORT
  case ID_CARD_FRONT
  case ID_CARD_BACK
  case DRIVER_LICENSE
  case RESIDENCE_PERMIT_FRONT
  case RESIDENCE_PERMIT_BACK
  case OTHER_FRONT
  case OTHER_BACK
  case FACE_PHOTO
  case FACE_PHOTO_WITH_LIVENESS
  case INSTRUCTION_NOT_NEEDED
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public class IdenfyIdentificationResultsUISettingsV2 : ObjectiveC.NSObject {
  @objc public var isShowSuccessSpinnerImmediateRedirect: Swift.Bool
  @objc public var isShowErrorSpinnerImmediateRedirect: Swift.Bool
  @objc public var isAdditionalUploadingInformationVisible: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public class IdenfyErrorResponse : ObjectiveC.NSObject, Swift.Codable {
  public var message: Swift.String
  public var identifier: Swift.String
  public var severity: Swift.String?
  required public init(message: Swift.String, identifier: Swift.String)
  required public init(message: Swift.String, identifier: Swift.String, severity: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public enum ImmediateRedirectEnum : Swift.Int {
  case none
  case partial
  case full
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct ConstsIdenfyStrings {
}
@objc @IBDesignable public class DashedDottedLineView : UIKit.UIView {
  @objc @IBInspectable public var lineColor: UIKit.UIColor
  @objc @IBInspectable public var lineWidth: CoreGraphics.CGFloat
  @objc @IBInspectable public var lineWidthIpad: CoreGraphics.CGFloat
  @objc @IBInspectable public var round: Swift.Bool
  @objc @IBInspectable public var horizontal: Swift.Bool
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForInterfaceBuilder()
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
@objc public class IdenfyUISettings : ObjectiveC.NSObject {
  public var idenfyColorPrimary: UIKit.UIColor
  public var idenfyColorPrimaryDark: UIKit.UIColor
  public var idenfyColorAccent: UIKit.UIColor
  public var idenfyDocumentBorderColor: UIKit.UIColor
  public var idenfyCameraFloatingActionButtonColor: UIKit.UIColor
  public var idenfyCameraFloatingActionButtonBackgroundColor: UIKit.UIColor
  public var idenfyResultsProgressBarColor: UIKit.UIColor
  public var loadingView: UIKit.UIView?
  public var logoImage: UIKit.UIImage?
  public var documentsOverlayText: iDenfySDK.OverlayText
  public var idenfyLivenessUISettings: iDenfySDK.IdenfyLivenessUISettings
  public var idenfyIdentificationSessionUISettings: iDenfySDK.IdentificationSessionUISettings
  public var idenfyNavigationUISettings: iDenfySDK.IdenfyNavigationUISettings
  public var isCustomResultsView: Swift.Bool
  public var areInstructionsNeeded: Swift.Bool?
  public var idenfyInitialAgreementUISettings: iDenfySDK.IdenfyInitialAgreementUISettings
  public var idenfyDocumentsSelectionUISettings: iDenfySDK.IdenfyDocumentsSelectionUISettings
  public var idenfyDocumentsButtonsUISettings: iDenfySDK.IdenfyDocumentsButtonsUISettings
  public var idenfyIdentificationResultsUISettings: iDenfySDK.IdenfyIdentificationResultsUISettings
  public var idenfySplashScreenUISettings: iDenfySDK.IdenfySplashScreenUISettings
  public func setIdenfyDocumentBorderColor(color: UIKit.UIColor?)
  public func setIdentificationSessionUISettings(identificationSessionUISettings: iDenfySDK.IdentificationSessionUISettings)
  public func setIdenfyNavigationUISettings(idenfyNavigationUISettings: iDenfySDK.IdenfyNavigationUISettings)
  public func setLivenessUISettings(livenessUISettings: iDenfySDK.IdenfyLivenessUISettings?)
  public func setIdenfyDocumentOverlayText(documentOverlayText: iDenfySDK.OverlayText?)
  @objc deinit
}
public protocol IdenfyInProcessIdentificationResultsDelegate : ObjectiveC.NSObject {
  func onIdenfyFlowFinished(idenfyFlowSettings: iDenfySDK.IdenfyFlowSettings) -> iDenfySDK.CustomWaitingViewController
  func onIdentificationStatusReceived(idenfyIdentificationResultStatus: iDenfySDK.IdenfyIdentificationResultStatus)
}
@objc public class IdenfyFontsUISettings : ObjectiveC.NSObject {
  @objc public var regularFontName: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc open class DocumentTypeCell : UIKit.UITableViewCell {
  @objc @IBOutlet public var nameLabel: UIKit.UILabel!
  @objc @IBOutlet public var documentImageView: UIKit.UIImageView!
  @objc @IBOutlet public var rightArrow: UIKit.UIImageView!
  public var lang: Swift.String?
  public var document: idenfycore.DocumentTypeClass? {
    get
    set
  }
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IdenfySDKNavigationController {
}
@objc public class IdenfyNavigationUISettings : ObjectiveC.NSObject {
  public var idenfyDocumentsCameraSessionBackArrowColor: UIKit.UIColor
  public var idenfyDocumentsResultsBackArrowColor: UIKit.UIColor
  public var idenfyFaceSessionCameraBackArrowColor: UIKit.UIColor
  public var idenfyFaceResultsCameraBackArrowColor: UIKit.UIColor
  public var idenfyDocumentsCameraSessionBackTextViewColor: UIKit.UIColor
  public var idenfyDocumentsResultsBackTextViewColor: UIKit.UIColor
  public var idenfyFaceResultsBackTextViewColor: UIKit.UIColor
  public var idenfyFaceSessionBackTextViewColor: UIKit.UIColor
  public var overridesStoryboard: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public class IdenfyBuilder : ObjectiveC.NSObject {
  public func withPresentInitialView(_ isPresent: Swift.Bool) -> iDenfySDK.IdenfyBuilder
  public func withAuthToken(_ authToken: Swift.String) -> iDenfySDK.IdenfyBuilder
  public func withIssuingCountry(_ issuingCountry: Swift.String) -> iDenfySDK.IdenfyBuilder
  public func withCustomLocalization(_: Swift.String? = nil) -> iDenfySDK.IdenfyBuilder
  public func withCustomSelectedLocale(_ selectedLocale: Swift.String) -> iDenfySDK.IdenfyBuilder
  public func withCustomLocalStoryboard(_ isCustomStoryboard: Swift.Bool) -> iDenfySDK.IdenfyBuilder
  public func withUISettings(_ idenfyUISettings: iDenfySDK.IdenfyUISettings) -> iDenfySDK.IdenfyBuilder
  public func withCustomIdentificationResultsSettings(_ idenfyIdentificationResultsSettings: iDenfySDK.IdenfyIdentificationResultsSettings) -> iDenfySDK.IdenfyBuilder
  public func withCustomViewsInitialisationSettings(_ idenfyViewsInitialisationSettings: iDenfySDK.IdenfyViewsInitialisationSettings) -> iDenfySDK.IdenfyBuilder
  public func build() -> iDenfySDK.IdenfySettings
  @objc override dynamic public init()
  @objc deinit
}
@objc public class IdenfyViewsBuilderV2 : ObjectiveC.NSObject {
  public func withSplashScreenV2View(_ splashScreenV2View: idenfyviews.SplashScreenV2Viewable) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withIssuedCountryView(_ issuedCountryViewV2: idenfyviews.IssuedCountryViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withCountrySelectionView(_ countrySelectionViewV2: idenfyviews.CountrySelectionViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withCountryCellView(_ countrySelectionCellView: idenfyviews.CountryCellViewable.Type) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withLanguageSelectionView(_ languageSelectionViewV2: idenfyviews.LanguageSelectionViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withLanguageCellView(_ langaugeSelectionCellView: idenfyviews.LanguageCellViewable.Type) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withDocumentSelectionView(_ documentSelectionViewV2: idenfyviews.DocumentSelectionViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withDocumentCellView(_ documentCellView: idenfyviews.DocumentCellViewable.Type) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withConfirmationView(_ confirmationViewV2: idenfyviews.ConfirmationViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withConfirmationViewDocumentStepCellView(_ confirmationViewDocumentStepCellView: idenfyviews.DocumentStepCellViewable.Type) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withCameraPermissionView(_ cameraPermissionViewV2: idenfyviews.CameraPermissionViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withUploadPhotoView(_ uploadPhotoViewV2: idenfyviews.UploadPhotoViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withDrawerContentView(_ drawerContentViewV2: idenfyviews.DrawerContentViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withDocumentCameraView(_ documentCameraViewV2: idenfyviews.DocumentCameraViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withDocumentCameraResultView(_ cameraResultViewV2: idenfyviews.CameraResultViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withFaceCameraView(_ faceCameraViewV2: idenfyviews.FaceCameraViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withFaceCameraResultView(_ cameraResultViewV2: idenfyviews.CameraResultViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withIdentificationResultsView(_ identificationResultsViewV2: idenfyviews.IdentificationResultsViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withIdentificationResultsStepCellView(_ resultsStepCellView: idenfyviews.ResultsStepCellViewable.Type) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withIdentificationSuccessResultsView(_ identificationSuccessResultsViewV2: idenfyviews.IdentificationSuccessResultsViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withManualReviewingStatusWaitingView(_ manualReviewingStatusWaitingViewV2: idenfyviews.ManualReviewingStatusWaitingViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withManualReviewingStatusFailedView(_ manualReviewingStatusFailedViewV2: idenfyviews.ManualReviewingStatusFailedViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func withManualReviewingStatusApprovedView(_ manualReviewingStatusApprovedViewV2: idenfyviews.ManualReviewingStatusApprovedViewableV2) -> iDenfySDK.IdenfyViewsBuilderV2
  public func build() -> iDenfySDK.IdenfyViewsV2
  @objc override dynamic public init()
  @objc deinit
}
@objc public class IdenfyViewsV2 : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@IBDesignable @objc open class IdenfyRectangleView : UIKit.UIView {
  public var ratio: CoreGraphics.CGFloat
  public var isPreviewing: Swift.Bool
  public var width: CoreGraphics.CGFloat?
  public var height: CoreGraphics.CGFloat?
  public var idenfyTransparentCameraOverlayColor: UIKit.UIColor
  public var idenfyPhotoResultBackgroundColor: UIKit.UIColor
  public var idenfyOverlayStrokeRadius: CoreGraphics.CGFloat
  public var idenfyDocumentShapeRadius: CoreGraphics.CGFloat
  @objc @IBInspectable open var inspectableIdenfyTransparentCameraOverlayColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var inspectableIdenfyPhotoResultBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var inspectableIdenfyOverlayStrokeRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var inspectableIdenfyDocumentShapeRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  public var idenfyOverlayStrokeColor: UIKit.UIColor
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class IdenfyUIBuilderV2 : ObjectiveC.NSObject {
  public var isConfirmationViewNeeded: Swift.Bool?
  public var isLanguageSelectionNeeded: Swift.Bool
  public var areInstructionsNeeded: Swift.Bool?
  public var idenfyLivenessUISettings: iDenfySDK.IdenfyLivenessUISettings?
  public var idenfyIdentificationResultsUISettingsV2: iDenfySDK.IdenfyIdentificationResultsUISettingsV2
  public var immediateRedirectEnum: iDenfySDK.ImmediateRedirectEnum?
  public func withInstructions(_ areInstructionsNeeded: Swift.Bool) -> iDenfySDK.IdenfyUIBuilderV2
  public func withConfirmationView(_ isConfirmationViewNeeded: Swift.Bool) -> iDenfySDK.IdenfyUIBuilderV2
  public func withLanguageSelection(_ isLanguageSelectionNeeded: Swift.Bool) -> iDenfySDK.IdenfyUIBuilderV2
  public func withLivenessUISettings(_ idenfyLivenessUISettings: iDenfySDK.IdenfyLivenessUISettings) -> iDenfySDK.IdenfyUIBuilderV2
  public func withIdenfyIdentificationResultsUISettingsV2(_ idenfyIdentificationResultsUISettingsV2: iDenfySDK.IdenfyIdentificationResultsUISettingsV2) -> iDenfySDK.IdenfyUIBuilderV2
  @objc public func withImmediateRedirect(_ immediateRedirectEnum: iDenfySDK.ImmediateRedirectEnum) -> iDenfySDK.IdenfyUIBuilderV2
  public func build() -> iDenfySDK.IdenfyUISettingsV2
  @objc override dynamic public init()
  @objc deinit
}
public class IdenfyIdentificationResultsUISettings {
  public var idenfyResultsLoadingLayoutBackgroundColor: UIKit.UIColor
  public var idenfyResultsDocumentsTextViewsColor: UIKit.UIColor
  public var idenfyResultsLoadingTextViewColor: UIKit.UIColor
  public var idenfyResultsMessageTextColor: UIKit.UIColor
  public var idenfyResultsProgressBarColor: UIKit.UIColor
  public var idenfyResultsLoadingProgressDottedLineColor: UIKit.UIColor
  public var idenfyResultsConfirmButtonColor: UIKit.UIColor
  public var idenfyResultsSubtitleUISettings: iDenfySDK.IdenfyResultsSubtitleUISettings
  @objc deinit
}
@objc public class AuthenticationResultResponse : ObjectiveC.NSObject, Swift.Codable {
  final public let idenfyIdentificationStatus: iDenfySDK.IdenfyIdentificationStatus
  final public let identificationStatus: Swift.String?
  final public let errorMessage: idenfycore.ErrorMessage?
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc open class TakePhotoButton : UIKit.UIButton {
  final public let lightColor: UIKit.UIColor
  final public let darkColor: UIKit.UIColor
  @objc override dynamic public func draw(_: CoreGraphics.CGRect)
  @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class IdenfyLivenessSettings {
  public var showPreEnrollmentScreen: Swift.Bool
  public var showUserLockedScreen: Swift.Bool
  public var showRetryScreen: Swift.Bool
  @objc deinit
}
@objc public enum AutoIdentificationStatus : Swift.Int, Swift.Codable {
  case APPROVED
  case FAILED
  case UNVERIFIED
  public typealias RawValue = Swift.String
  public var rawValue: iDenfySDK.AutoIdentificationStatus.RawValue {
    get
  }
  public init?(rawValue: iDenfySDK.AutoIdentificationStatus.RawValue)
}
extension UIView {
  public func fillSuperview(padding: UIKit.UIEdgeInsets)
  public func fillSuperview()
  public func anchor(top: UIKit.NSLayoutYAxisAnchor?, left: UIKit.NSLayoutXAxisAnchor?, bottom: UIKit.NSLayoutYAxisAnchor?, right: UIKit.NSLayoutXAxisAnchor?, padding: UIKit.UIEdgeInsets = .zero, size: CoreGraphics.CGSize = .zero)
}
extension UILabel {
  public func halfTextColorChange(fullText: Swift.String, changeText: Swift.String, color: UIKit.UIColor, font: UIKit.UIFont?)
}
extension UIColor {
  convenience public init(hexString: Swift.String, alpha: CoreGraphics.CGFloat = 1.0)
  public func toHexString() -> Swift.String
}
public class IdenfyDocumentsButtonsUISettings {
  public var idenfyNextCameraSessionButtonColor: UIKit.UIColor
  public var idenfyRetakePhotoButtonColor: UIKit.UIColor
  @objc deinit
}
public enum IdentificationResultsStepStateEnum : Swift.String {
  case LOADING
  case ERROR
  case SUCCESS
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc open class IdenfyViewsInitialisationSettings : ObjectiveC.NSObject {
  public var isDocumentCameraViewFromStoryBoard: Swift.Bool
  public var isFaceCameraViewFromStoryBoard: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public class IdenfyLivenessUISettings : ObjectiveC.NSObject {
  public var idenfyLivenessPrimaryColor: UIKit.UIColor
  public var idenfyLivenessAccentColor: UIKit.UIColor
  public var idenfyLivenessTextColor: UIKit.UIColor
  public var livenessFeedbackBackgroundColor: UIKit.UIColor
  public var livenessFeedbackFont: UIKit.UIFont
  public var livenessFeedbackFontSizeMobile: CoreGraphics.CGFloat?
  public var livenessFeedbackFontSizeTablet: CoreGraphics.CGFloat?
  public var livenessFeedbackFontColor: UIKit.UIColor?
  public var livenessFrameBackgroundColor: UIKit.UIColor
  public var livenessFrameColor: UIKit.UIColor?
  public var livenessFrameWidth: Swift.Int32?
  public var livenessCancelButtonImage: UIKit.UIImage?
  public var livenessIdentificationOvalProgressColor1: UIKit.UIColor
  public var livenessIdentificationProgressStrokeColor: UIKit.UIColor
  public var livenessIdentificationOvalProgressColor2: UIKit.UIColor
  public var livenessIdentificationProgressStrokeWidth: Swift.Int32
  public var livenessIdentificationStrokeWidth: Swift.Int32
  public var livenessIdentificationProgressRadialOffset: Swift.Int32
  public var livenessOverlayBrandingImage: UIKit.UIImage?
  public var livenessReadyScreenForegroundColor: UIKit.UIColor?
  public var livenessReadyScreenBackgroundColors: [UIKit.UIColor]?
  public var livenessReadyScreenTextBackgroundColor: UIKit.UIColor?
  public var livenessReadyScreenButtonBorderColor: UIKit.UIColor?
  public var livenessReadyScreenButtonBorderWidth: Swift.Int32?
  public var livenessReadyScreenButtonCornerRadius: Swift.Int32?
  public var livenessReadyScreenButtonBackgroundNormalColor: UIKit.UIColor?
  public var livenessReadyScreenButtonBackgroundHighlightedColor: UIKit.UIColor?
  public var livenessReadyScreenShowBrandingImage: Swift.Bool?
  public var livenessCameraPermissionsScreenImage: UIKit.UIImage?
  public var livenessResultScreenForegroundColor: UIKit.UIColor?
  public var livenessResultScreenIndicatorColor: UIKit.UIColor?
  public var livenessResultScreenUploadProgressFillColor: UIKit.UIColor?
  public var livenessResultScreenUploadProgressTrackColor: UIKit.UIColor?
  public var livenessResultScreenShowUploadProgressBar: Swift.Bool?
  public var livenessResultScreenResultAnimationSuccessBackgroundImage: UIKit.UIImage?
  @objc public var livenessIdCheckCustomization: iDenfySDK.LivenessIdCheckCustomization
  public init(livenessAccentColor: UIKit.UIColor, livenessPrimaryColor: UIKit.UIColor, livenessTextColor: UIKit.UIColor?, brandingImageV2: UIKit.UIImage?, successResultImageV2: UIKit.UIImage?, cameraPermissionsScreenImageV2: UIKit.UIImage?, livenessCancelButtonImageV2: UIKit.UIImage?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class LivenessIdCheckCustomization : ObjectiveC.NSObject {
  public var buttonBackgroundNormalColor: UIKit.UIColor?
  public var buttonBackgroundHighlightColor: UIKit.UIColor?
  public var captureScreenTextBackgroundColor: UIKit.UIColor?
  public var reviewScreenTextBackgroundColor: UIKit.UIColor?
  public var captureFrameStrokeColor: UIKit.UIColor?
  @objc override dynamic public init()
  public init(idenfyLivenessAccentColor: UIKit.UIColor, idenfyLivenessPrimaryColor _: UIKit.UIColor)
  @objc deinit
}
@objc public class NibView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum ManualIdentificationStatus : Swift.Int, Swift.Codable {
  case APPROVED
  case FAILED
  case WAITING
  case INACTIVE
  public typealias RawValue = Swift.String
  public var rawValue: iDenfySDK.ManualIdentificationStatus.RawValue {
    get
  }
  public init?(rawValue: iDenfySDK.ManualIdentificationStatus.RawValue)
}
public struct ConstsLiveness {
}
extension UINavigationController {
  @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
}
public struct FontsLoader {
}
extension UIFont {
  public static func jbs_registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
}
@objc public class IdenfyLivenessUIBuilder : ObjectiveC.NSObject {
  public var livenessFeedbackBackgroundColor: UIKit.UIColor?
  public var livenessFeedbackFont: UIKit.UIFont?
  public var livenessFeedbackFontSize: CoreGraphics.CGFloat?
  public var livenessFeedbackFontColor: UIKit.UIFont?
  public var livenessMainBackgroundColor: UIKit.UIColor?
  public var livenessMainForegroundColor: UIKit.UIColor?
  public func build() -> iDenfySDK.IdenfyLivenessUISettings
  @objc override dynamic public init()
  @objc deinit
}
open class DrawerContentViewV1 : idenfyviews.DrawerContentViewV2 {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc convenience dynamic public init()
  @objc required dynamic public init?(coder _: Foundation.NSCoder)
  override open func setupSlideScrollViewV2(slides: [idenfyviews.InstructionVideo]?, scrollWidth: CoreGraphics.CGFloat?)
  @objc deinit
}
public enum CustomWaitingViewController {
  case viewControllerProvided(vc: UIKit.UIViewController)
}
public class IdenfyResultsSubtitleUISettings {
  public var isVisibleOnLoadingStatus: Swift.Bool
  public var isVisibleOnApprovedStatus: Swift.Bool
  public var isVisibleOnDeniedStatus: Swift.Bool
  public var isVisibleOnSuspectedStatus: Swift.Bool
  public var isVisibleOnReviewingStatus: Swift.Bool
  @objc deinit
}
public struct IdenfyFlowSettings {
  public let identificationSteps: [idenfycore.Step]
}
@objc public class IdenfySettingsV2 : ObjectiveC.NSObject {
  public var selectedLocale: Swift.String? {
    get
    }
  @objc override dynamic public init()
  @objc deinit
}
public class IdenfyInitialAgreementUISettings {
  public var idenfyInitialAgreementBackgroundColor: UIKit.UIColor
  public var idenfyInitialAgreementInformationTitleColor: UIKit.UIColor
  public var idenfyInitialAgreementTextColor: UIKit.UIColor
  public var idenfyInitialAgreementButtonColor: UIKit.UIColor
  public var idenfyInitialAgreementButtonColorUnFocused: UIKit.UIColor
  public var idenfyInitialAgreementSpinnerSolidColor: UIKit.UIColor
  public var idenfyInitialAgreementSpinnerBorderColor: UIKit.UIColor
  public var idenfyInitialAgreementSpinnerArrowColor: UIKit.UIColor
  public var idenfyInitialAgreementCountryTextColor: UIKit.UIColor
  public var idenfyInitialAgreementButtonTextColor: UIKit.UIColor
  public var idenfyInitialAgreementButtonTextColorUnFocused: UIKit.UIColor
  @objc deinit
}
@objc public class IdentificationSessionUISettings : ObjectiveC.NSObject {
  public var overridesStoryboard: Swift.Bool
  public var idenfyFaceResultsInformationTitleColor: UIKit.UIColor
  public var idenfyFaceSessionCameraInformationTitleColor: UIKit.UIColor
  public var idenfyDocumentsCameraSessionInformationTitleColor: UIKit.UIColor
  public var idenfyDocumentsResultsInformationTitleColor: UIKit.UIColor
  public var idenfyPhotoResultBackgroundColor: UIKit.UIColor
  public var idenfyTransparentCameraOverlayColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
public class IdenfyDocumentsSelectionUISettings {
  public var idenfyBackgroundColor: UIKit.UIColor?
  public var idenfyDocumentListItemBackgroundColor: UIKit.UIColor?
  public var idenfyDocumentListItemTextColor: UIKit.UIColor?
  public var idenfyDocumentsSelectionInformationTextViewColor: UIKit.UIColor?
  @objc deinit
}
@objc public class IdenfySettings : ObjectiveC.NSObject {
  public var selectedLocale: Swift.String? {
    get
    }
  public var idenfyLivenessSettings: iDenfySDK.IdenfyLivenessSettings
  @objc deinit
}
@objc public class IdenfySDKNavigationController : UIKit.UINavigationController {
  @objc deinit
  public func deinitResources()
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
public enum IdenfyProcessingResultState {
  case PROCESSING
  case FINISHED(canRetry: Swift.Bool, retakeSteps: idenfycore.RetakeSteps?)
}
@objc public class OverlayText : ObjectiveC.NSObject {
  public var font: UIKit.UIFont?
  public var fontSize: CoreGraphics.CGFloat
  public var fontColor: UIKit.UIColor
  @objc deinit
}
@objc public enum IdenfyLocaleEnum : Swift.Int, Swift.Codable {
  case EN
  case LT
  case PL
  case RU
  case RO
  case LV
  case DE
  case FR
  case IT
  case ES
  case SV
  case BG
  public typealias RawValue = Swift.String
  public var rawValue: iDenfySDK.IdenfyLocaleEnum.RawValue {
    get
  }
  public init?(rawValue: iDenfySDK.IdenfyLocaleEnum.RawValue)
}
@objc public class IdenfyUISettingsV2 : ObjectiveC.NSObject {
  public var isConfirmationViewNeeded: Swift.Bool?
  public var isLanguageSelectionNeeded: Swift.Bool
  public var idenfyLivenessUISettingsV2: iDenfySDK.IdenfyLivenessUISettings
  public var areInstructionsNeeded: Swift.Bool?
  public var idenfyIdentificationResultsUISettingsV2: iDenfySDK.IdenfyIdentificationResultsUISettingsV2
  public var idenfyInProcessIdentificationResultsDelegate: iDenfySDK.IdenfyInProcessIdentificationResultsDelegate?
  @objc override dynamic public init()
  @objc deinit
}
extension iDenfySDK.IssuingCountrySkippedEnum : Swift.Equatable {}
extension iDenfySDK.IssuingCountrySkippedEnum : Swift.Hashable {}
extension iDenfySDK.IssuingCountrySkippedEnum : Swift.RawRepresentable {}
extension iDenfySDK.CustomCameraSessionDrawerState : Swift.Equatable {}
extension iDenfySDK.CustomCameraSessionDrawerState : Swift.Hashable {}
extension iDenfySDK.IdenfyIdentificationStatus : Swift.Equatable {}
extension iDenfySDK.IdenfyIdentificationStatus : Swift.Hashable {}
extension iDenfySDK.IdenfyIdentificationStatus : Swift.RawRepresentable {}
extension iDenfySDK.InstructionEnum : Swift.Equatable {}
extension iDenfySDK.InstructionEnum : Swift.Hashable {}
extension iDenfySDK.InstructionEnum : Swift.RawRepresentable {}
extension iDenfySDK.ImmediateRedirectEnum : Swift.Hashable {}
extension iDenfySDK.ImmediateRedirectEnum : Swift.RawRepresentable {}
extension iDenfySDK.AutoIdentificationStatus : Swift.Equatable {}
extension iDenfySDK.AutoIdentificationStatus : Swift.Hashable {}
extension iDenfySDK.AutoIdentificationStatus : Swift.RawRepresentable {}
extension iDenfySDK.IdentificationResultsStepStateEnum : Swift.Hashable {}
extension iDenfySDK.IdentificationResultsStepStateEnum : Swift.RawRepresentable {}
extension iDenfySDK.ManualIdentificationStatus : Swift.Equatable {}
extension iDenfySDK.ManualIdentificationStatus : Swift.Hashable {}
extension iDenfySDK.ManualIdentificationStatus : Swift.RawRepresentable {}
extension iDenfySDK.IdenfyLocaleEnum : Swift.Equatable {}
extension iDenfySDK.IdenfyLocaleEnum : Swift.Hashable {}
extension iDenfySDK.IdenfyLocaleEnum : Swift.RawRepresentable {}
